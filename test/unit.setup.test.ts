import RNSRegistryData from '@rsksmart/rns-registry/RNSRegistryData.json';
import AddrResolverData from '@rsksmart/rns-resolver/AddrResolverData.json';
import { accounts, contract, web3, defaultSender } from '@openzeppelin/test-environment';
import { hash as namehash } from 'eth-ens-namehash';
import RNS from '../src/index';
import Web3 from 'web3';

const Registry = contract.fromABI(RNSRegistryData.abi, '0x608060405234801561001057600080fd5b50336000808060001b815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610abf806100776000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806316a25cbd1161005b57806316a25cbd146102035780631896f70a146102595780635b0fc9c3146102a7578063c66485b2146102f557610088565b80630178b8bf1461008d57806302571be3146100fb57806306ab59231461016957806314ab9038146101c1575b600080fd5b6100b9600480360360208110156100a357600080fd5b8101908080359060200190929190505050610339565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101276004803603602081101561011157600080fd5b8101908080359060200190929190505050610378565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101bf6004803603606081101561017f57600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506103b7565b005b610201600480360360408110156101d757600080fd5b8101908080359060200190929190803567ffffffffffffffff16906020019092919050505061063a565b005b61022f6004803603602081101561021957600080fd5b8101908080359060200190929190505050610735565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b6102a56004803603604081101561026f57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610768565b005b6102f3600480360360408110156102bd57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610893565b005b6103376004803603602081101561030b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109be565b005b600080600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b823373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461042557600080fd5b60008484604051602001808381526020018281526020019250505060405160208183030381529060405280519060200120905083857fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e8285604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a38260008083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550807f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a060008088815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a260008086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b813373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106a857600080fd5b827f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa6883604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390a28160008085815260200190815260200160002060010160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050565b600080600083815260200190815260200160002060010160149054906101000a900467ffffffffffffffff169050919050565b813373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107d657600080fd5b827f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a083604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a28160008085815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b813373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461090157600080fd5b827fd4735d920b0f87494915f556dd9b54c8f309026070caea5c737245152564d26683604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a28160008085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000801b3373ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a2f57600080fd5b816000808060001b815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505056fea265627a7a7231582021ea930de73773f51ae29eebaa8d18f31edc43d49945fb902ad3b271df69256464736f6c634300050c0032');
const PublicResolver = contract.fromABI(AddrResolverData.abi, '0x608060405234801561001057600080fd5b5060405161073b38038061073b8339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506106a7806100946000396000f3fe6080604052600436106100555760003560e01c806301ffc9a71461005a5780632dff6941146100cc5780633b3b57de1461011b57806341b9dc2b14610196578063c3d014d6146101f3578063d5fa2b0014610238575b600080fd5b34801561006657600080fd5b506100b26004803603602081101561007d57600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610293565b604051808215151515815260200191505060405180910390f35b3480156100d857600080fd5b50610105600480360360208110156100ef57600080fd5b81019080803590602001909291905050506102f5565b6040518082815260200191505060405180910390f35b34801561012757600080fd5b506101546004803603602081101561013e57600080fd5b8101908080359060200190929190505050610312565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156101a257600080fd5b506101d9600480360360408110156101b957600080fd5b81019080803590602001909291908035906020019092919050505061034f565b604051808215151515815260200191505060405180910390f35b3480156101ff57600080fd5b506102366004803603604081101561021657600080fd5b810190808035906020019092919080359060200190929190505050610434565b005b34801561024457600080fd5b506102916004803603604081101561025b57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610536565b005b6000633b3b57de60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102ee575063d8389dc560e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600060026000838152602001908152602001600020549050919050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f6164647200000000000000000000000000000000000000000000000000000000821480156103e05750600073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b8061042c57507f68617368000000000000000000000000000000000000000000000000000000008214801561042b57506000801b600260008581526020019081526020016000205414155b5b905092915050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156104be57600080fd5b505afa1580156104d2573d6000803e3d6000fd5b505050506040513d60208110156104e857600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461051957600080fd5b816002600085815260200190815260200160002081905550505050565b813373ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302571be3836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156105c057600080fd5b505afa1580156105d4573d6000803e3d6000fd5b505050506040513d60208110156105ea57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461061b57600080fd5b816001600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505056fea265627a7a7231582065e5cf1ff7f7aabf8ced3f382e56e22bfb8c1caba4667b5f6f63a6e7a08473b864736f6c63430005100032');

describe('addr', function () {
  const [ owner, resolution ] = accounts;

  const TLD = 'rsk';
  const TEST_LABEL = 'alice';
  const TEST_DOMAIN = `${TEST_LABEL}.${TLD}`;
  const TEST_NODE = namehash(TEST_DOMAIN);

  let registry: any;
  let publicResolver: any;
  let rns: RNS;

  beforeEach(async() => {
    const opts = { from: owner };
    registry = await Registry.new();
    publicResolver = await PublicResolver.new(registry.address);
    await registry.setDefaultResolver(publicResolver.address);

    await registry.setSubnodeOwner('0x00', web3.utils.sha3(TLD), defaultSender);
    await registry.setSubnodeOwner(namehash(TLD), web3.utils.sha3(TEST_LABEL), defaultSender);
    
    await publicResolver.setAddr(TEST_NODE, resolution);

    const options = { 
      contractAddresses: {
        registry: registry.address
      }
    }

    rns = new RNS(web3 as unknown as Web3, options);
  });

  test('addr', async () => {
    const addr = await rns.addr(TEST_DOMAIN);
    expect(addr).toBe(resolution);
  });

  test('sso', async () => {
    let isAvailable = await rns.isSubdomainAvailable(TEST_DOMAIN, 'test');
    expect(isAvailable).toBe(true);
    
    await rns.createSubdomain(TEST_DOMAIN, 'test', owner);
    isAvailable = await rns.isSubdomainAvailable(TEST_DOMAIN, 'test');
    expect(isAvailable).toBe(false);
  });
});